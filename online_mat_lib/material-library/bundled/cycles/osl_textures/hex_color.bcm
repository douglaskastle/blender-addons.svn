<?xml version="1.0" encoding="UTF-8"?>
<material view_color="rgb(0.80000, 0.80000, 0.80000)" sample_lamp="True">
	<nodes>
		<node type="OUTPUT_MATERIAL" loc="546, 298" />
		<node type="MIX_SHADER" fac="0.20000" loc="326, 327" />
		<node type="SCRIPT" mode="INTERNAL" script="0" diffuse_color1="rgba(0.20000, 0.80000, 0.20000, 1.0)" diffuse_color2="rgba(0.80000, 0.20000, 0.20000, 1.0)" diffuse_color3="rgba(0.20000, 0.20000, 0.80000, 1.0)" coordinates="Vector(0.0, 0.0, 0.0)" loc="-106, 239" />
		<node type="MAPPING" translation="Vector(0.0, 0.0, 0.0)" rotation="Vector(0.0, 0.0, 0.0)" scale="Vector(50.0, 50.0, 200.0)" use_min="False" use_max="False" vector="Vector(0.0, 0.0, 0.0)" loc="-402, 295" />
		<node type="BSDF_GLOSSY" distribution="BECKMANN" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.20000" loc="117, 162" />
		<node type="BSDF_DIFFUSE" color="rgba(0.80000, 0.80000, 0.80000, 1.0)" roughness="0.0" loc="122, 305" />
		<node type="TEX_COORD" dupli="False" loc="-615, 279" />
	</nodes>
	<links>
		<link to="1" input="1" from="5" output="0" />
		<link to="0" input="0" from="1" output="0" />
		<link to="1" input="2" from="4" output="0" />
		<link to="5" input="0" from="2" output="0" />
		<link to="0" input="2" from="2" output="2" />
		<link to="2" input="3" from="3" output="0" />
		<link to="3" input="0" from="6" output="2" />
	</links>
	<scripts>
		<script name="Hexagon_Color_.osl" id="0">
#define A 0.86602540378443864676372317075294 // sqrt(3)/2<br />#define A2 (2*A)<br />#define A4 (4*A)<br />#define SY (1/A)<br /><br />shader hexagons(<br />    color Diffuse_Color1 = color(0.2, 0.8, 0.2),<br />    color Diffuse_Color2 = color(0.8, 0.2, 0.2),<br />    color Diffuse_Color3 = color(0.2, 0.2, 0.8),<br />    vector Coordinates = 0,<br />    output color Color = 0,<br />    output int Index = 1,<br />    output float Distance = 0)<br />{<br />    // calculate the color<br />    <br />    color colors[3] = {Diffuse_Color1,<br />                       Diffuse_Color2,<br />                       Diffuse_Color3};   <br /> <br />    // we warp the grid so that two adjacent equilateral triangles<br />    // are mapped to two triangles that fit in a square<br />    float syc = Coordinates[1] * SY;<br />    float sxc = Coordinates[0] + 0.5 * syc;<br /> <br />    int ind[18] = {1,1,3,3,3,1, 2,2,2,3,3,3, 1,2,2,2,1,1};<br /> <br />    int iy = int(mod(syc,3.0));<br />    int ix = int(mod(sxc,3.0));<br />    ix = iy * 6 + ix * 2 + ( mod(sxc,1.0) &gt; mod(syc,1.0) );    <br /> Index = ind[ix];<br />    Color = colors[Index-1];    <br /> <br />    // calculate the distance to the center of the hexagon<br />       <br />    float sx = mod(Coordinates[0],3);<br />    float sy = mod(Coordinates[1]+0.75,A4); <br /><br />    // map everthing to a single quadrant<br />    if ( sx &gt; 1.5 ) sx = 3 - sx;<br />    if ( sy &gt; A2 ) sy = A4 - sy;<br />    <br />    // the distance were interested in is the distance to <br />    // the *closest* center point <br />    float d1 = distance(vector(sx,sy,0),vector(1.5,A2,0));<br />    float d2 = distance(vector(sx,sy,0),vector(0,A,0));<br />    float d6 = distance(vector(sx,sy,0),vector(1.5,0,0));<br />        <br />    Distance = min(min(d1,d2), d6);<br /> <br />}<br />
		</script>
	</scripts>
</material>